"""-Loads a CALPGM .cat file, as well as a dictionary "Base Catalog Dictionary.txt" that contains the number corresponding to each asymmetric rotor level.-Searches through the .cat file line by line, it identifies the upper and lower state quantum numbers and assigns their ID from the dictionary-Checks the identified transitions and spits out whether it's an a/b/c type as a number 1,2,3 and prints the IDs and type to a file-TODO: Add Sij valuesAssumptions/Requirements:-Catalog needs to be prepped by adding white space delimiters between all fields-It's a standard asymmetric rotor (CALPGM code 303) and only uses 3 quantum #s per state"""import numpy as npdef Find_Transition_Index (J, Ka, Kc):	for j in range(len(CatalogDictionary)):		if ((J == CatalogDictionary[j][1]) and (Ka == CatalogDictionary[j][2]) and (Kc == CatalogDictionary[j][3])):				return 	int(CatalogDictionary[j][0])	return -1def Get_Transition_Type (Index1,Index2):	if ((Index1 == -1) or (Index2 == -1)):		return -1	DeltaKa = np.abs(CatalogDictionary[Index1][2]-CatalogDictionary[Index2][2])	DeltaKc = np.abs(CatalogDictionary[Index1][3]-CatalogDictionary[Index2][3])			if ((DeltaKa > 1.0) or (DeltaKc > 1.0)):	#We're ignoring all "forbidden" transitions for now, if you want them in, just uncomment this line and add something below ala DeltaKa%2.0 == 1.0/0.0		return -1	elif ((DeltaKa == 1.0) and (DeltaKc == 1.0)):		return 2	elif ((DeltaKa == 0.0) and (DeltaKc == 1.0)):		return 1	elif ((DeltaKa == 1.0) and (DeltaKc == 0.0)):		return 3	else:		return -1	######## Code Starts Here	CatalogDictionary = np.loadtxt("Base Catalog Dictionary1.txt",skiprows=2)print (np.shape(CatalogDictionary))PickettCatalog = np.loadtxt ("SPFIT Catalog/Test.cat")OutFile = "Base Catalog.txt"FileHandle = open(OutFile,"w")FileString = ""Count = 0for i in range(len(PickettCatalog)):		J1 = PickettCatalog[i][8]	Ka1 = PickettCatalog[i][9]	Kc1 = PickettCatalog[i][10]	J2 = PickettCatalog[i][11]	Ka2 = PickettCatalog[i][12]	Kc2 = PickettCatalog[i][13]	TransitionLow = Find_Transition_Index(J1,Ka1,Kc1)	TransitionHigh = Find_Transition_Index(J2,Ka2,Kc2)		Type = Get_Transition_Type (TransitionLow,TransitionHigh)	if (Type > 0):		Count +=1		FileString += "%d %d %d\n" % (TransitionLow,TransitionHigh,Type)	FileHandle.write(FileString)FileHandle.close()print ("Wrote %d lines to Base Catalog file: %s" % (Count,OutFile))